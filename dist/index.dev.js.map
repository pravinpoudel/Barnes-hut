{"version":3,"sources":["index.js"],"names":["Node","index","x","y","ctx","beginPath","strokeStyle","rect","stroke","Rectangle","w","h","node","WIDTH","HEIGHT","Quadtree","boundary","CoM","mass","NE","NW","SE","SW","isDivided","nodes","se","sw","ne","nw","bound","length","push","partition","existingNode","insert","totalX","totalY","findMaxRange","maxX","Infinity","maxY","minX","minY","i","isNaN","console","warn","distance","point1","point2","Math","sqrt","pow","calRepDisplacement","node1","displacement","d","forceRepulsive","kSquare","sleep","ms","Promise","resolve","setTimeout","myCanvas","document","getElementById","getContext","qt","nodes2","initializeNodesRandomly","n","floor","random","theta","k","iterationCount","count","clearRect","width","height","time","j","displacement2","timeEnd","BH","log","toVisit","qd","pop","isNotSame","s"],"mappings":"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","sourcesContent":["class Node {\r\n  constructor(index, x, y) {\r\n    this.index = index;\r\n    this.x = x;\r\n    this.y = y;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = \"#FF0000\";\r\n    ctx.rect(x, y, 1, 1);\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nclass Rectangle {\r\n  constructor(x, y, w, h) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.w = w;\r\n    this.h = h;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = \"#000000\";\r\n    ctx.rect(x - w, y - h, 2 * w, 2 * h);\r\n    ctx.stroke();\r\n  }\r\n\r\n  bound(node) {\r\n    if (this.x + this.w == WIDTH) {\r\n      return (\r\n        node.x >= this.x - this.w &&\r\n        node.x <= this.x + this.w &&\r\n        node.y >= this.y - this.h &&\r\n        node.y < this.y + this.h\r\n      );\r\n    }\r\n\r\n    if (this.y + this.h == HEIGHT) {\r\n      return (\r\n        node.x >= this.x - this.w &&\r\n        node.x < this.x + this.w &&\r\n        node.y >= this.y - this.h &&\r\n        node.y <= this.y + this.h\r\n      );\r\n    } else {\r\n      return (\r\n        node.x >= this.x - this.w &&\r\n        node.x < this.x + this.w &&\r\n        node.y >= this.y - this.h &&\r\n        node.y < this.y + this.h\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nclass Quadtree {\r\n  constructor(boundary) {\r\n    this.boundary = boundary;\r\n    this.CoM = {\r\n      x: null,\r\n      y: null,\r\n    };\r\n    this.mass = 0;\r\n    this.NE = null;\r\n    this.NW = null;\r\n    this.SE = null;\r\n    this.SW = null;\r\n\r\n    this.isDivided = false;\r\n    this.nodes = [];\r\n  }\r\n\r\n  partition() {\r\n    let x = this.boundary.x;\r\n    let y = this.boundary.y;\r\n    let w = this.boundary.w;\r\n    let h = this.boundary.h;\r\n\r\n    let se = new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2);\r\n    let sw = new Rectangle(x - w / 2, y + h / 2, w / 2, h / 2);\r\n    let ne = new Rectangle(x + w / 2, y - h / 2, w / 2, h / 2);\r\n    let nw = new Rectangle(x - w / 2, y - h / 2, w / 2, h / 2);\r\n\r\n    this.NW = new Quadtree(nw);\r\n    this.NE = new Quadtree(ne);\r\n    this.SW = new Quadtree(sw);\r\n    this.SE = new Quadtree(se);\r\n    this.isDivided = true;\r\n  }\r\n\r\n  insert(node) {\r\n    if (!this.boundary.bound(node)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.nodes.length < 1 && !this.isDivided) {\r\n      //update center of mass\r\n      //update mass of the tree node\r\n      this.mass++;\r\n      this.CoM = {\r\n        x: node.x,\r\n        y: node.y,\r\n      };\r\n      this.nodes.push(node);\r\n      return true;\r\n    } else {\r\n      if (!this.isDivided) {\r\n        this.partition();\r\n        this.isDivided = true;\r\n        let existingNode = this.nodes[0];\r\n        this.nodes = [];\r\n        this.mass = 0;\r\n        this.NW.insert(existingNode) ||\r\n          this.NE.insert(existingNode) ||\r\n          this.SW.insert(existingNode) ||\r\n          this.SE.insert(existingNode);\r\n      }\r\n      let totalX = this.mass * this.CoM.x + node.x;\r\n      let totalY = this.mass * this.CoM.y + node.y;\r\n      this.mass++;\r\n      this.CoM.x = totalX / this.mass;\r\n      this.CoM.y = totalY / this.mass;\r\n\r\n      return (\r\n        this.NW.insert(node) ||\r\n        this.NE.insert(node) ||\r\n        this.SW.insert(node) ||\r\n        this.SE.insert(node)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//we dont need to find max because we are limmiting the position in force calculation\r\nfunction findMaxRange(nodes) {\r\n  let maxX = -Infinity,\r\n    maxY = -Infinity,\r\n    minX = Infinity,\r\n    minY = Infinity;\r\n\r\n  let x, y;\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    if (!(isNaN((x = +nodes[i].x)) && isNaN((y = +nodes[i].y)))) {\r\n      if (x > maxX) maxX = x;\r\n      if (x < minX) minX = x;\r\n      if (y > maxY) maxY = y;\r\n      if (y < minY) minY = y;\r\n    }\r\n    //create a rectangle with this width and height and create a tree likewise\r\n    else {\r\n      console.warn(`position of point at index ${i} is not valid number`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction distance(point1, point2) {\r\n  return Math.sqrt(\r\n    Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2)\r\n  );\r\n}\r\n\r\nfunction calRepDisplacement(node1, CoM, mass) {\r\n  let displacement = {};\r\n  let d = distance(node1, CoM);\r\n  let forceRepulsive = kSquare / d;\r\n  displacement.x = ((node1.x - CoM.x) / d) * forceRepulsive * mass;\r\n  displacement.y = ((node1.y - CoM.y) / d) * forceRepulsive * mass;\r\n  return displacement;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nlet myCanvas = document.getElementById(\"draw\");\r\nlet ctx = myCanvas.getContext(\"2d\");\r\n\r\nconst WIDTH = 1024;\r\nconst HEIGHT = 900;\r\nlet boundary = new Rectangle(WIDTH / 2, HEIGHT / 2, WIDTH / 2, HEIGHT / 2);\r\nlet qt = new Quadtree(boundary);\r\nlet nodes = [];\r\nlet nodes2 = [];\r\n\r\nfunction initializeNodesRandomly(n) {\r\n  nodes = [];\r\n  nodes2 = [];\r\n  for (let i = 0; i < n; i++) {\r\n    let node = new Node(\r\n      i,\r\n      Math.floor(Math.random() * WIDTH),\r\n      Math.floor(Math.random() * HEIGHT)\r\n    );\r\n    nodes.push(node);\r\n    nodes2.push(node);\r\n  }\r\n}\r\n\r\n//calculating the force on each body\r\nconst theta = 0.45;\r\nconst k = 50;\r\nconst kSquare = Math.pow(k, 2);\r\nlet iterationCount = 2;\r\nconst count = async () => {\r\n  while (iterationCount > 0) {\r\n    await sleep(1000);\r\n    iterationCount--;\r\n    ctx.clearRect(0, 0, myCanvas.width, myCanvas.height);\r\n    let boundary = new Rectangle(WIDTH / 2, HEIGHT / 2, WIDTH / 2, HEIGHT / 2);\r\n    qt = new Quadtree(boundary);\r\n    initializeNodesRandomly(1000);\r\n    console.time(\"brute force time \" + iterationCount);\r\n    for (let i = 0; i < nodes2.length; i++) {\r\n      nodes2[i].displacement = {\r\n        x: 0,\r\n        y: 0,\r\n      };\r\n      for (let j = 0; j < nodes2.length; j++) {\r\n        //check for if these two are connected or not with adjajency matrix\r\n        if (i != j) {\r\n          let displacement2 = calRepDisplacement(nodes2[i], nodes2[j], 1);\r\n          nodes2[i].displacement.x += displacement2.x;\r\n          nodes2[i].displacement.y += displacement2.y;\r\n        }\r\n      }\r\n    }\r\n    console.timeEnd(\"brute force time \" + iterationCount);\r\n\r\n    const BH = () => {\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        qt.insert(nodes[i]);\r\n      }\r\n      console.log(qt);\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        let node1 = nodes[i];\r\n        node1.displacement = {\r\n          x: 0,\r\n          y: 0,\r\n        };\r\n        let toVisit = [];\r\n        toVisit.push(qt);\r\n        while (toVisit.length > 0) {\r\n          let qd = toVisit.pop();\r\n          let mass = qd.mass;\r\n          //if it is empty box\r\n          if (mass == 0) continue;\r\n\r\n          let nodes = qd.nodes;\r\n          let CoM = qd.CoM;\r\n\r\n          if (mass == 1) {\r\n            // console.log(nodes[0]);\r\n            //calculate the force if it is not node1\r\n            let isNotSame = true;\r\n            if (nodes.length > 0) {\r\n              isNotSame = nodes[0].index != node1.index;\r\n            }\r\n            if (isNotSame && distance(node1, CoM) > 0.0001) {\r\n              let displacement = calRepDisplacement(node1, CoM, mass);\r\n              node1.displacement.x += displacement.x;\r\n              node1.displacement.y += displacement.y;\r\n            }\r\n            continue;\r\n          }\r\n          let boundary = qd.boundary;\r\n          let s = 2 * boundary.w;\r\n          let d = distance(node1, CoM);\r\n\r\n          //treat it as a single body\r\n          if (s / d < theta) {\r\n            let displacement = calRepDisplacement(node1, CoM, mass);\r\n            node1.displacement.x += displacement.x;\r\n            node1.displacement.y += displacement.y;\r\n            continue;\r\n          }\r\n\r\n          //otherwise\r\n          let NE = qd.NE;\r\n          let NW = qd.NW;\r\n          let SW = qd.SW;\r\n          let SE = qd.SE;\r\n\r\n          toVisit.push(NE, NW, SW, SE);\r\n        }\r\n      }\r\n    };\r\n\r\n    console.time(\"BH time\" + iterationCount);\r\n    BH();\r\n    console.timeEnd(\"BH time\" + iterationCount);\r\n  }\r\n};\r\n\r\nconsole.log(\"hi\");\r\ncount();"],"file":"index.dev.js"}